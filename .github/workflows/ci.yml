name: ci
on:
  push:
    tags:
      # Full version
      - "[0-9]+.[0-9]+.[0-9]+"
      # Prerelease version
      - "[0-9]+.[0-9]+.[0-9]+-*"

  pull_request:
    branches:
      # Trigger on pull requests into main
      - main
    types: [ opened, synchronize ]

jobs:
  lint:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Run cargo clippy to pick up any errors
        run: cargo clippy --all-targets -- -Dwarnings
      - name: Check code is formatted
        run: cargo fmt -- --check

  cross-compile:
    name: Cross-compile executable
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4
      - name: Install cross
        run: "cargo install cross \
          --git https://github.com/cross-rs/cross \
          --rev 88f49ff79e777bef6d3564531636ee4d3cc2f8d2"
      - name: Build binary
        run: cross build --release --target ${{ matrix.target }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/blob

  build:
    name: Build package
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-22.04
        rust:
          - stable
          - beta
        experimental: [false]
        include:
          - os: ubuntu-22.04
            rust: nightly
            experimental: true
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: ${{ matrix.rust }}
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - name: Run tests
        run: cargo test --all-features
      - name: Build binary
        run: cargo build --release
      - name: Build package
        run: cargo deb
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.rust == 'stable' }}
        with:
          name: stableartifacts-${{ matrix.os }}
          path: |
            target/release/blob
            target/debian/*.deb

  publish:
    name: Publish release artifact
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: stable
      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.PUBLISH_SECRET }}

  publish-dry-run:
    name: Dry-run publish for non-release artifact
    runs-on: ubuntu-latest
    if: github.ref_type != 'tag'
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Dry-run publish on non-tags
        run: cargo publish --dry-run
